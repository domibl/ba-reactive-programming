import { DegreeProgram } from "src/app/model/degree-program";
import { Course } from "src/app/model/course";

export const DEGREEPROGRAMS: DegreeProgram[] = [
    {
        id: 1,
        title: "Software Engineering",
        description: "Software ist der „Geist in der Maschine“. Sie steckt zum Beispiel in der Kaffeemaschine, im Auto und natürlich in jedem Rechner: im Smartphone ebenso wie im Supercomputer. Bei der Entwicklung von innovativer Qualitätssoftware ist kreatives Problemlösen durch Einsatz modernster Methoden und Werkzeuge gefragt. Somit geht das Studium Software Engineering über das reine Programmieren weit hinaus. Es umfasst den gesamten Software-Entwicklungszyklus: von der Problemanalyse über Design, Implementierung und Test bis zur Wartung und Weiterentwicklung.",
        degreeProgramType: "Bachelorstudium",
        organizationType: "Vollzeit oder berufsbegleitend",
        academicDegree: "Bachelor of Science in Engineering (BSc)",
        semesterCount: 6,
        ects: 180
    },
    {
        id: 2,
        title: "Software Engineering",
        description: "Software ist allgegenwärtig – aber unsichtbar: Sie steckt in der Kaffeemaschine, im Auto und natürlich in jedem Rechner, vom Smartphone bis zum Supercomputer. Software ist „der Geist in der Maschine“ und bringt der Hardware das Denken bei. Für die Entwicklung von leistungsfähigen Softwaresystemen, die spezielle Anforderungen erfüllen sollen und innovative technologische Ansätze verfolgen, sind über das Bachelorniveau hinausgehendes Wissen und zusätzliche Fähigkeiten notwendig. Es braucht – um eine Analogie zum Hausbau zu verwenden – nicht nur Software-HandwerkerInnen, also EntwicklerInnen, sondern auch Software-ArchitektInnen. Das Ziel des Masterstudiengangs Software Engineering (SE) ist es, Sie dazu auszubilden.",
        degreeProgramType: "Masterstudium",
        organizationType: "Vollzeit",
        academicDegree: "Master of Science in Engineering (MSc)",
        semesterCount: 4,
        ects: 120
    },
    {
        id: 3,
        title: "Information Engineering und -Management",
        description: "IT-Verantwortliche in Unternehmen sehen sich mit der Herausforderung konfrontiert, Informationssysteme zu planen, zu entwickeln und zu analysieren, mit denen strategische Unternehmensziele erreicht werden. Bei diesen IT-Systemen stehen nicht nur die gemeinsame Datennutzung, sondern auch die Benutzerorientierung im Fokus. Für ihre Realisierung sind neben fundiertem technischem Know-how in Softwareentwicklung, Business Intelligence und analytischer IT somit zusätzlich organisatorische, rechtliche und soziale Kompetenzen nötig. Eben diese Kombination von Wissen wird im Masterstudium Information Engineering und -Management vermittelt, das damit Aufstiegsmöglichkeiten in verantwortungsvolle Positionen im IT-Management eröffnet.",
        degreeProgramType: "Masterstudium",
        organizationType: "berufsbegleitend",
        academicDegree: "Master of Science in Engineering (MSc)",
        semesterCount: 4,
        ects: 120
    },
    {
        id: 4,
        title: "Human-Centered Computing",
        description: "Die Vernetzung von Mensch und Computer wird immer enger, sei es bei der Erfüllung von Aufgaben im Beruf, in der Freizeit oder bei der Erledigung alltäglicher Dinge. Damit die zunehmend komplexe Technik dahinter auch zukunftsträchtig und menschengerecht ist, muss sie personalisierbar sein und unterstützende Funktionen bieten, wenn alters- oder situationsbedingt Fähigkeiten eingeschränkt sind. Für die Entwicklung besonders nutzerfreundlicher IT-Systeme bedarf es Know-how in vielfältigen Bereichen, unter anderem in Interaktionsdesign, Sensorik, Bildverarbeitung, Natural User Interfaces, Design Thinking und Prototyping. Eben diese interdisziplinäre Ausbildung bietet der 2014 neugestartete Master Human-Centered Computing.",
        degreeProgramType: "Masterstudium",
        organizationType: "berufsbegleitend",
        academicDegree: "Master of Science in Engineering (MSc)",
        semesterCount: 4,
        ects: 120
    },
];

export const COURSES: Course[] = [
    {
        id: 1,
        degreeProgramId: 1,
        title: "Softwareentwicklung mit klassischen Sprachen",
        semester: 3,
        courseType: "Pflicht / Vorlesung",
        ects: 2,
        description: "Die Programmiersprache ANSI/ISO C für die imperative Programmierung mit besonderer Betonung der schwierigen/fehleranfälligen Konzepte, mit dem Ziel einen guten Programmierstil zu entwickeln. Kurze Wiederholung der Grundlagen der objektorientierten Programmierung aus dem Modul PRO2. Programmierung mit ANSI/ISO C++: Programmiersprache C++ für die imperative aber vor allem für die objektorientierte und generische Programmierung (mit Schablonen, templates), Konzept der Ausnahmen und deren Behandlung (exception handling).",
        examType: "Schriftliche Prüfung",
    },
    {
        id: 2,
        degreeProgramId: 1,
        title: "Softwareentwicklung mit klassischen Sprachen",
        semester: 3,
        courseType: "Pflicht / Übung",
        ects: 3,
        description: "Die Übungen vertiefen die Vorlesung, indem Beispiele neuer Algorithmen (z. B. für kombinatorische Suchprobleme) und Datenstrukturen (z. B. Graphen) in C und C++ umgesetzt werden. Die Übungen werden unter UNIX durchgeführt, wobei besonders auch auf Programmentwicklungswerkzeuge (großteils Open-Source-Software) eingegangen wird.",
        examType: "Immanente Prüfung",
    },
    {
        id: 3,
        degreeProgramId: 1,
        title: "Komponenten-orientierte Softwareentwicklung",
        semester: 5,
        courseType: "Pflicht / Vorlesung",
        ects: 2,
        description: "Einführung in die Konzepte der komponentenorientierten Software-Entwicklung, Architektur von mehrschichtigen Anwendungen, Grundkon-zepte der .NET-Technologie, Assemblies, .NET Core, Fortgeschrittene Konzepte von C# (Vererbung, Erweiterungsmethoden, Generics, Kovari-anz/Kontravarianz, asynchrone Programmierung) , Basiskonzepte des .NET-Frameworks (Delegates, Attribute, Base-Class-Library, Streams, LINQ), Entwicklung von Rich-Clients (Windows Presentation Foundation, Universal Windows Platform) und Web-Anwendungen (ASP.NET MVC, ASP.NET Core), Architektur von .NET-Anwendungen, RESTful Web Services (ASP.NET Web API), SOAP-basierte Web Services, Interoperabilität mit anderen Sprachen.",
        examType: "Schriftliche Prüfung",
    },
    {
        id: 4,
        degreeProgramId: 1,
        title: "Komponenten-orientierte Softwareentwicklung",
        semester: 5,
        courseType: "Pflicht / Übung",
        ects: 4,
        description: "Einführung in die Konzepte der komponentenorientierten Software-Entwicklung, Architektur von mehrschichtigen Anwendungen, Grundkon-zepte der .NET-Technologie, Assemblies, .NET Core, Fortgeschrittene Konzepte von C# (Vererbung, Erweiterungsmethoden, Generics, Kovari-anz/Kontravarianz, asynchrone Programmierung) , Basiskonzepte des .NET-Frameworks (Delegates, Attribute, Base-Class-Library, Streams, LINQ), Entwicklung von Rich-Clients (Windows Presentation Foundation, Universal Windows Platform) und Web-Anwendungen (ASP.NET MVC, ASP.NET Core), Architektur von .NET-Anwendungen, RESTful Web Services (ASP.NET Web API), SOAP-basierte Web Services, Interoperabilität mit anderen Sprachen.",
        examType: "Immanente Prüfung",
    },
    {
        id: 5,
        degreeProgramId: 1,
        title: "Logische und formale Grundlagen der Informatik",
        semester: 1,
        courseType: "Pflicht / Vorlesung",
        ects: 2,
        description: "Aussagenlogik, Prädikatenlogik, Mengenlehre, Relationen (Äquivalenz¬relationen und Ordnungsrelationen), Funktionen, Induktionsbeweise",
        examType: "Schriftliche Prüfung",
    },
    {
        id: 6,
        degreeProgramId: 1,
        title: "Logische und formale Grundlagen der Informatik",
        semester: 1,
        courseType: "Pflicht / Übung",
        ects: 3,
        description: "In der Übung synchron zur Vorlesung praktische Behandlung der Lehrinhalte aus den Bereichen Aussagenlogik, Prädikatenlogik, Mengenlehre, Relationen und Funktionen.",
        examType: "Immanente Prüfung",
    },
    {
        id: 7,
        degreeProgramId: 1,
        title: "Mathematik 1 - Algebra",
        semester: 2,
        courseType: "Pflicht / Vorlesung",
        ects: 2,
        description: "Algebraische Strukturen, Isomorphismen, lineare Algebra (Vektorräume, Matrizen und Gleichungs-systeme), Geometrie (Skalarprodukt und Projektionen), Gleichungslösen (algebraisch und numerisch), Graphentheorie",
        examType: "Schriftliche Prüfung",
    },
    {
        id: 8,
        degreeProgramId: 1,
        title: "Mathematik 1 - Algebra",
        semester: 2,
        courseType: "Pflicht / Übung",
        ects: 1,
        description: "In der Übung synchron zur Vorlesung praktische Umsetzung der Lehrinhalte",
        examType: "Immanente Prüfung",
    },
    {
        id: 9,
        degreeProgramId: 1,
        title: "Mathematik 2 - Statistik",
        semester: 3,
        courseType: "Pflicht / Vorlesung",
        ects: 2,
        description: "Wahrscheinlichkeitsräume, Dichte- und Verteilungsfunktion, wichtige diskrete und stetige Wahrscheinlichkeitsverteilungen, beschreibende Statistik, Parameterschätzung, Einführung in die Testtheorie.",
        examType: "Schriftliche Prüfung",
    },
    {
        id: 10,
        degreeProgramId: 1,
        title: "Mathematik 2 - Statistik",
        semester: 3,
        courseType: "Pflicht / Übung",
        ects: 1,
        description: "In der Übung synchron zur Vorlesung praktische Umsetzung der Lehrinhalte aus Bereich: Wahrscheinlichkeitsräume, Dichte- und Verteilungsfunktion, wichtige diskrete und stetige Wahrscheinlichkeitsverteilungen, beschreibende Statistik, Parameterschätzung, Einführung in die Testtheorie.",
        examType: "Immanente Prüfung",
    },
    {
        id: 11,
        degreeProgramId: 1,
        title: "Softwareentwicklung mit Enterprise-Technologien",
        semester: 6,
        courseType: "Pflicht / Vorlesung",
        ects: 3,
        description: "Grundlagen von Java-basierten Komponententechnologien (JavaBeans, OSGi, Modulsystem von Java), Konzepte und Anwendung von O/R-Mapping-Werkzeugen (Hibernate, JPA), Entwicklung mehrschichtiger Anwendungen mit Spring (Datenzugriff mit JDBC, JPA, Spring Data; Geschäftslogik: Transaktionsdefinition mithilfe von AOP; Entwicklung der Präsentationsschicht mit Spring Web MVC, Anwendungskonfiguration mit Spring Boot).",
        examType: "Schriftliche Prüfung",
    },
    {
        id: 12,
        degreeProgramId: 1,
        title: "Softwareentwicklung mit Enterprise-Technologien",
        semester: 6,
        courseType: "Pflicht / Übung",
        ects: 3,
        description: "Grundlagen komponentenorientierter Entwicklung in Java (JavaBeans), konzeptionelle Grundlagen von O/R-Mapping und deren Umsetzung in konkreten Frameworks (Hibernate, JPA), Architektur von Enterprise-Anwendungen (lose Kopplung, Dependency Injection, Architektur der Datenzugriffsschicht, Anwendung des aspektorientierten Programmierparadigmas, Behandlung von Transaktionen, Integration von Web-Technologien), leichtgewichtige Applikations-Frameworks (Spring).",
        examType: "Immanente Prüfung",
    },


    {
        id: 13,
        degreeProgramId: 4,
        title: "Augmented Reality",
        semester: 2,
        courseType: "Pflicht / Integrierte Lehrveranstaltung",
        ects: 5.5,
        description: "Überblick und Konzepte von Augmented Reality Grundlagen Computergrafik Anwendungsgebiete der AR und Softwareentwicklung Trackingrundlagen und optisches Tracking Mobile Augmented Reality Head Mounted Displays Räumliche Augmented Reality Tangible User Interfaces Kollaborative AR Anwendungen Fortgeschrittene Darstellungsverfahren Interaktionstechniken",
        examType: "Mündliche oder Schriftliche Prüfung",
    },
    {
        id: 14,
        degreeProgramId: 4,
        title: "Human-Centered Automation und Robotics",
        semester: 2,
        courseType: "Pflicht / Integrierte Lehrveranstaltung",
        ects: 3,
        description: "Design-Prinzipien für Human-Centered Automation- und Robotersysteme und der Entwurf von human-centered agents Anforderungen und Performance-Metriken für Human Centered Robotik: Sicherheit, Flexibilität und Anpassungsfähigkeit an die Benutzer etc. Modellierung des menschlichen Verhaltens und der Absichten Schnittstellen: tragbare Bewegungssensoren, bioelektrische Aktivität-Sensoren, audiovisuelle Befehle, haptische Interfaces, Regelstrategien für Mensch-Maschine-Interaktion und Design von sicherer Mensch-Roboter-Interaktion Mensch-Robot-Interaction (HRI): Aufgabendefinition, Agenten (Mensch und Roboter) Autonomie unter Berücksichtigung menschlicher Handlungen und Lernen Konzepte für die Robotersteuerung im HRI: kooperative Task-Raum, Hybrid Kraft-/Bewegungssteuerung, Informationsverarbeitung in Sensor-Actor Netzwerke Beispiele für Anwendungen: Therapie- und Trainingsroboter, Mensch-Maschine kooperative Systeme in der Chirurgie, Service-Roboter und Telepresence, Augmented und Virtual Reality.",
        examType: "Mündliche oder Schriftliche Prüfung",
    },
    {
        id: 15,
        degreeProgramId: 4,
        title: "Adaptivität und Personalisierung",
        semester: 3,
        courseType: "Pflicht / Vorlesung",
        ects: 3,
        description: "Überblick über personalisierte Systeme: Konfigurierbarkeit, Adaptierbarkeit und Aktivität; Benutzermodellierung: Beispiele, Konzepte und Methoden; Adaptivität und Benutzermodellierung im Kontext kollaborativer und assistierender Systeme; Recommender Systeme: kollaboratives filtern, inhalts-basierte Empfehlungen; Datenanalyse; Evaluierung personalisierter Systeme",
        examType: "Mündliche oder Schriftliche Prüfung",
    },
    {
        id: 16,
        degreeProgramId: 4,
        title: "Adaptivität und Personalisierung",
        semester: 3,
        courseType: "Pflicht / Übung",
        ects: 2.5,
        description: "Begleitende Übung zur Vorlesung, praktische Anwendung des in der Vorlesung vermittelten Wissens.",
        examType: "Immanente Beurteilung",
    },
    {
        id: 17,
        degreeProgramId: 4,
        title: "Quality Engineering",
        semester: 4,
        courseType: "Pflicht / Integrierte Lehrveranstaltung",
        ects: 3,
        description: "Qualitätsgesteuerte Entwicklung: Produkt- und Prozessqualität, Qualitätsmanagement und -entwicklung, Qualitätsmodelle, -normen und -verfahren (KVP, TQM, EFQM, HOQ, ISO 9000ff, ISO 25000 ff.), CMMI, Kundengesteuerte Entwicklung: Requirements Management, Usability & Requirements-Driven Development, Value-based Software Engineering, Produktlebenszyklus-Management (Application Lifecycle Management), Strategisches Quality Engineering: IT Governance (Strategische IT-Führung; ITIL, COBIT, ISO 20000), Risikomanagement, Servicelevel-Management, Changemanagement & Qualitätserhalt, Desaster Recovery Management",
        examType: "Immanente Beurteilung",
    },

    {
        id: 18,
        degreeProgramId: 2,
        title: "Formale Sprachen, Compiler- und Werkzeugbau",
        semester: 1,
        courseType: "Pflicht / Vorlesung",
        ects: 3,
        description: "Formale Sprachen: Begriffe und Definitionen (z. B. Symbol, Regel, Grammatik, Sprache, Ableitung, Reduktion), Übersicht Chomsky-Hierarchie, reguläre Sprachen, reguläre Ausdrücke und endliche Automaten, kontextfreie Sprachen und Kellerautomaten, insbesondere deterministische Erkennung, LL(k) und LR(k). Compiler- und Werkzeugbau: Compilergrobstruktur (Frontend, Backend, Datenfluss), lexikalische Analyse, Syntaxanalyse, Fehlererkennung sowie -behandlung, formale Beschreibung von Übersetzungsprozessen (attributierte Grammatiken) und Implementierung dieser Übersetzungsprozesse mittels Compilergeneratoren. Zwischensprachen, Methoden der Optimierungen und Codegenerierung.",
        examType: "Schriftliche Prüfung",
    },
    {
        id: 19,
        degreeProgramId: 2,
        title: "Formale Sprachen, Compiler- und Werkzeugbau",
        semester: 1,
        courseType: "Pflicht / Übung",
        ects: 2,
        description: "In den Übungen werden die theoretischen Aspekte der Formalen Sprachen mit theoretischen Aufgaben, die Aspekte des Compiler- und Werkzeugbaus anhand der vollständigen Implementierung einer einfachen Beispielsprache in Form eines Interpretierers und eines Compilers, der Bytecode für eine eigene virtuelle Maschine erzeugt, geübt.",
        examType: "Immanente Beurteilung",
    },

    {
        id: 20,
        degreeProgramId: 3,
        title: "Infrastruktur- und Servicemanagement",
        semester: 1,
        courseType: "Pflicht / Vorlesung",
        ects: 1.5,
        description: "Grundlagen IT Governance, IT Service Management, Service Level Management (SLM) als Ausgangspunkt für die Ausgestaltung der IT Infrastruktur, COBIT, Standard ITIL V3",
        examType: "Schriftliche Prüfung",
    },
    {
        id: 21,
        degreeProgramId: 3,
        title: "Infrastruktur- und Servicemanagement",
        semester: 1,
        courseType: "Pflicht / Übung",
        ects: 2,
        description: "Grundlagen IT Governance, IT Service Management, Service Level Management (SLM) als Ausgangspunkt für die Ausgestaltung der IT Infrastruktur, COBIT, Standard ITIL V3",
        examType: "Immanente Beurteilung",
    },
    {
        id: 22,
        degreeProgramId: 3,
        title: "Integriertes Informationsmanagement",
        semester: 1,
        courseType: "Pflicht / Vorlesung",
        ects: 1.5,
        description: "Vermittlung der Grundlagen und der wesentlichen Zusammenhänge sowie der Querschnittsaufgaben des Informationsmanagements. Aufzeigen, welche Aufgaben des Informationsmanagements umfasst und wie sie erfüllt werden können. Einführung in das Informationsmanagement, Modelle des Informationsmanagement, Begriffliche Terminologie im Informationsmanagement, Einführung in das strategische Informationsmanagement Informationssystem-Management, Qualitätsmanagement, Informatik-Controlling bzw. ITControlling, Projektmanagement, Personalmanagement / Menschenführung, Sicherheitsmanagement, Technologiemanagement, Electronic Business, Wissensmanagement.",
        examType: "Mündliche oder Schriftliche Prüfung",
    }
];


export function findDegreeProgramById(degreeProgramId: number): DegreeProgram {
    return DEGREEPROGRAMS[degreeProgramId];
}

export function findCoursesForDegreeProgram(degreeProgramId: number): Course[] {
    return COURSES.filter(course => course.degreeProgramId == degreeProgramId);
}